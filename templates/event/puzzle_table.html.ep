<table class="table table-bordered table-condensed">
<thead>
  <tr><th class="lead">
      Puzzle 
      <button id="show-closed-button" class="pull-right btn btn-mini">
        
      </button>
    </th>
    <th id="headers" class="lead">Solution</th><th class="lead">Users</th><th class="lead">Opened</th><th class="lead">Idle/Closed</th></tr>
</thead>
<tbody>
% my $open_count = 0;
% my $all_count = 0;
% for my $tree_round ( sort { my $an = $a->{round}->display_name; my $bn = $b->{round}->display_name; return 0 if $an eq $bn; return -1 if $an eq '_catchall'; return 1 if $bn eq '_catchall'; return $a->{round}->id <=> $b->{round}->id;} @$tree ) {
%     my $round_name = $tree_round->{round}->display_name;
%     if ($round_name ne '_catchall' ) {
<tr style="color: #333; background-color: #999;"><td colspan="5"><b>Round: <%= $round_name %></b></td></tr>
%     }
%     for my $puzzle ( sort { $a->{open_time} <=> $b->{open_time} } @{ $tree_round->{puzzles} } ) {
%         $all_count++;
%         $open_count++ if $puzzle->{state} eq 'open';
%         if ($puzzle->{state} eq 'open') {
<tr><td><%= link_to $puzzle->{puzzle}->display_name => puzzle => { id => $puzzle->{puzzle}->id } %></td>
  <td><%= join(', ', (map { $_->text } @{ $puzzle->{puzzle}->chat->get_all_of_type('solution') })) || ' ' %></td>
  <td><%= join(', ',$puzzle->{puzzle}->users_live)%></td>
%         } else {
<tr class="warning muted closed-row" <%== $hide_closed eq 'true' ? 'style="display: none;"' : '' %> >
  <td>
    <%= link_to $puzzle->{puzzle}->display_name => puzzle => { id => $puzzle->{puzzle}->id } => (class => 'muted')%>  <span class="label pull-right">Closed</span>
  </td>
  <td><%= join(', ', (map { $_->text } @{ $puzzle->{puzzle}->chat->get_all_of_type('solution') })) || '---' %></td>
  <td><%= join(', ',$puzzle->{puzzle}->users_live)%></td>
%         }
<td><%= verbose_timediff($puzzle->{open_time}) %></td>
%         if ($puzzle->{state} eq 'open') {
<td><%= verbose_timediff($puzzle->{activity_time}, 1) %></td>
%         } else {
<td><%= verbose_timediff($puzzle->{puzzle}->chat->get_last_timestamp('state')) %></td>
% }
</tr>
%     }
% }
</tbody>
</table>

% sub verbose_timediff {
%    my $diff = time-shift;
%    my $idle = shift;
%    return ($idle ? 'Active' : 'Just Now') if $diff < 30;
%    my ($num, $unit) = (int(10*$diff/(60*60*24))/10, 'Day');
%    ($num,$unit) = (int(10*$diff/(60*60))/10, 'Hour') if $diff < 60*60*24;
%    ($num,$unit) = (int($diff/60),'Minute') if $diff < 60*60;
%    ($num,$unit) = (int($diff),'Second') if $diff < 60;
%    $unit .= 's' if $num ne '1';
%    return "$num $unit Ago" unless $idle;
%    return "$num $unit";
% }

