% use List::MoreUtils qw/any none/;
<table class="table table-bordered table-condensed">
<thead>
  <tr><th class="lead">
      Puzzle 
    </th>
    <th class="lead state-column-cell">State</th>
    <th id="headers" class="lead">Solution</th><th class="lead users-column-cell">Users</th><th class="lead">Opened</th><th class="lead">Idle/Closed</th></tr>
</thead>
<tbody>
% my (%rounds_for_dead);
% for my $tree_round ( sort { my $an = $a->{round}->display_name; my $bn = $b->{round}->display_name; return 0 if $an eq $bn; return -1 if $an eq '_catchall'; return 1 if $bn eq '_catchall'; return $a->{round}->id <=> $b->{round}->id;} @$tree ) {
%     if ($tree_round->{round}->state eq 'dead') {
%           $rounds_for_dead{$tree_round->{round}->id} =1;
%           next;
%     }
%     my $round_name = $tree_round->{round}->display_name;
%     if ($round_name ne '_catchall' ) {
%        my $only_closed_puzzles = none {$_->{state} eq 'open'} @{ $tree_round->{puzzles}  };
%        $only_closed_puzzles = $only_closed_puzzles && (any {$_->{state} eq 'closed'} @{ $tree_round->{puzzles} });
<tr class="round-row<%== ($only_closed_puzzles ? ' closed-row' : '') %>">
  <td colspan="6">
    <b>Round: <%= $round_name %></b>
    <span class="round_priority">
%        if (any {$_->{state} eq 'open'} @{ $tree_round->{puzzles}  }) {
Set Open Puzzle Priorities:
      <div class="btn-group">
        <a class="btn btn-mini set_round_priority" round_id="<%= $tree_round->{round}->id %>">
          Low
        </a>
        <a class="btn btn-mini set_round_priority" round_id="<%= $tree_round->{round}->id %>">
          Normal
        </a>
        <a class="btn btn-mini set_round_priority" round_id="<%= $tree_round->{round}->id %>">
          High
        </a>
      </div>
%        }
      <button type="button" class="btn btn-mini kill_round_button" round_id="<%= $tree_round->{round}->id %>">Kill Round</button>
    </span>
  </td>
</tr>
%     }
%     for my $puzzle ( sort { $a->{open_time} <=> $b->{open_time} } @{ $tree_round->{puzzles} } ) {
%         if ($puzzle->{state} eq 'dead') {
%            $rounds_for_dead{$tree_round->{round}->id} =1;
%            next;
%         }
%         if ($puzzle->{state} eq 'open') {
%           my $puz_class='';
%           if (lc($puzzle->{priority}) eq 'high') {
  %             $puz_class=' class="lead"';
<tr class="row-high">
%           } else {
<tr>
%           }
  <td<%== $puz_class %>>
    <%= link_to $puzzle->{display_name} => puzzle => { id => $puzzle->{id} } %>
  </td>
  <td class="state-column-cell">
    <span class="btn-group">
      <a class="btn-mini btn btn-link dropdown-toggle" data-toggle="dropdown" href="#">
        <%= ucfirst($puzzle->{priority}) . " Priority" %>
        <span class="caret"></span>
      </a>
      <ul class="dropdown-menu priority-picker" puzzle_id="<%= $puzzle->{id} %>">
        <li><a href="#">High</a></li>
        <li><a href="#">Normal</a></li>
        <li><a href="#">Low</a></li>
        </ul>
    </span>
</td>
  <td><%== join(', ', map { "<b>$_</b>"} @{ $puzzle->{solutions} }) || ' ' %></td>
  <td class="users-column-cell"><%= join(', ', @{ $puzzle->{users_live}})%></td>
%         } else {
<tr class="muted closed-row">
  <td>
    <%= link_to $puzzle->{display_name} => puzzle => { id => $puzzle->{id} } => (class => 'muted')%> 
  </td>
  <td class="state-column-cell">
    <button class="btn-mini btn-link disabled">Closed</button>
  </td>
  <td><%== join(', ', map { "<b>$_</b>"} @{ $puzzle->{solutions} }) || '---' %></td>
  <td class="users-column-cell"><%= join(', ', @{ $puzzle->{users_live}})%></td>
%         }
<td><%== verbose_timediff($puzzle->{open_time}) %></td>
%         if ($puzzle->{state} eq 'open') {
<td><%== verbose_timediff($puzzle->{activity_time}, 1) %></td>
%         } else {
<td><%== verbose_timediff($puzzle->{state_change_time} || time) %></td>
%         }
</tr>
%     }
% }
</tbody>
</table>

% if (%rounds_for_dead) {
<table class="table table-bordered table-condensed dead-rounds">
<thead>
  <caption>"Dead" Rounds and Puzzles</caption>
  <tr class="dead-row"><th class="lead">
      Puzzle 
      </button>
    </th>
    <th class="lead state-column-cell">State</th>
    <th class="lead">Opened</th><th class="lead">Killed</th></tr>
</thead>
<tbody>
%   for my $tree_round ( sort { my $an = $a->{round}->display_name; my $bn = $b->{round}->display_name; return 0 if $an eq $bn; return -1 if $an eq '_catchall'; return 1 if $bn eq '_catchall'; return $a->{round}->id <=> $b->{round}->id;} @$tree ) {
%     next unless ($rounds_for_dead{$tree_round->{round}->id});
%     my $round_name = $tree_round->{round}->display_name;
%     if ($round_name ne '_catchall' ) {
%        if ($tree_round->{round}->state eq 'dead') {
<tr class="round-row dead-row">
  <td><b>Round: <%= $round_name %></b></td>
  <td colspan="3">Dead <button type="button" round_id="<%= $tree_round->{round}->id %>" class="btn btn-mini revive_round_button">Revive Round</button></td>
</tr>
%        } else {
<tr class="round-row"><td colspan="4"><b>Round: <%= $round_name %></b></td></tr>
%        }
%     }
%     for my $puzzle ( sort { $a->{open_time} <=> $b->{open_time} } @{ $tree_round->{puzzles} } ) {
%         next if ($puzzle->{state} ne 'dead');
%         next if ($round_name eq '_catchall' and scalar $puzzle->{puzzle}->rounds > 1);
<tr class="dead-row">
  <td>
    <%= link_to $puzzle->{display_name} => puzzle => { id => $puzzle->{id} } %>
  </td>
  <td>
    Dead <button type="button" puzzle_id="<%= $puzzle->{id} %>" class="btn btn-mini revive_puzzle_button">Revive Puzzle</button>
  </td>
  <td>
    <%== verbose_timediff($puzzle->{open_time}) %>
  </td>
  <td>
    <%== verbose_timediff($puzzle->{state_change_time}) %>
  </td>
</tr>
%     }
%   }
</tbody>
</table>

% }








% sub verbose_timediff {
%    my $diff = time-shift;
%    my $idle = shift;
%    return ($idle ? '<b>Active</b>' : '<b>Just Now</b>') if $diff < 60;
%    my ($num, $unit) = (int($diff/(60*60*24)), 'Day');
%    ($num,$unit) = (int(10*$diff/(60*60))/10, 'Hour') if $diff < 60*60*24*2;
%    ($num,$unit) = (int($diff/60),'Minute') if $diff < 60*60*2;
%    $unit .= 's' if $num ne '1';
%    return "$num $unit Ago" unless $idle;
%    return "$num $unit";
% }

%= javascript begin
apply_hide_closed_rows();
$(".priority-picker").children("li").children("a").click(function() {
    $(this).parent().parent().prev().addClass("disabled");
    jQuery.post('/puzzle/modal', { formname : 'event_puzzle_priority', 
                                   puzzleid : $(this).parent().parent().attr('puzzle_id'),
                                   priority: $(this).html().toLowerCase()
                                 }
               );
});
$(".kill_round_button").click(function () {
    $(this).fadeTo('fast', 0.2);
    jQuery.post('/event/modal', { formname : 'kill_round', 
                                   roundid : $(this).attr('round_id'),
                                 }
               );
});
$(".revive_round_button").click(function () {
    $(this).fadeTo('fast', 0.2);
    jQuery.post('/event/modal', { formname : 'revive_round', 
                                   roundid : $(this).attr('round_id'),
                                 }
               );
});
$(".revive_puzzle_button").click(function () {
    $(this).fadeTo('fast', 0.2);
    jQuery.post('/puzzle/modal', { formname : 'revive_puzzle', 
                                   puzzleid : $(this).attr('puzzle_id'),
                                 }
               );
});
$(".set_round_priority").click(function () {
    $(this).parent().parent().fadeTo('fast', 0.2);
    jQuery.post('/event/modal', { formname : 'set_round_priority', 
                                   roundid : $(this).attr('round_id'),                                                        
                                  priority : $(this).text()
                                 }
               );
});

    
%end
