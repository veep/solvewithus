<ul>
% my $open_count = 0;
% my $newest = 0;
% for my $tree_round ( sort { my $an = $a->{round}->display_name; my $bn = $b->{round}->display_name; return 0 if $an eq $bn; return -1 if $an eq '_catchall'; return 1 if $bn eq '_catchall'; return $a->{round}->id <=> $b->{round}->id;} @$tree ) {
%     my $round_name = $tree_round->{round}->display_name;
%     my $shifted_ul = 0;
%     for my $puzzle ( sort { $a->{open_time} <=> $b->{open_time} } @{ $tree_round->{puzzles} } ) {
%         if ($puzzle->{state} eq 'open') {
%            if (! $shifted_ul and $round_name ne '_catchall' ) {
<li><B><%= $round_name %></b>
<ul>
%                $shifted_ul=1;
%            }
%            $open_count++;
%            $newest = $puzzle->{open_time} if $puzzle->{open_time} > $newest;
%            if ($current_id and $puzzle->{puzzle}->id == $current_id) {
<li><u><%= $puzzle->{puzzle}->display_name %></u>
%            } else {
<li><%= link_to $puzzle->{puzzle}->display_name => puzzle => { id => $puzzle->{puzzle}->id } %>
%            }
(<%= timediff($puzzle->{open_time}) %>, idle <%= timediff($puzzle->{activity_time}) %>)</li>
%         }
%     }
%     if ($shifted_ul) {
</ul>
%     }
% }
</ul>
%= javascript begin
    $("#open_status_text").html("(<%= $open_count %> open, newest: <%= ($newest ? timediff($newest) : 'N/A') %>)");
%end

% sub timediff {
%    my $diff = time-$_[0];
%    return '0s' if $diff < 15;
%    return int($diff) . 's' if $diff < 60;
%    return (int($diff/60)).'m' if $diff < 60*60;
%    return (int(10*$diff/(60*60))/10) .'h' if $diff < 60*60*24;
%    return int($diff/(60*60*24)) .'d';
% }
