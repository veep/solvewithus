#!/usr/bin/env perl

use common::sense;
use FindBin;
use lib "$FindBin::Bin/../lib";
use SolveWith::Schema;
use File::Temp qw/tempdir/;
use File::Slurp qw/read_file/;
use Mail::SendEasy;
use Fcntl qw(:flock);
use App::Daemon qw(daemonize);
use Mojo::UserAgent;
use Mojo::JSON;
use Mojo::Util qw/md5_sum/;
use Cwd qw/realpath/;

my $source_id = shift;
my $source_file = shift;
$App::Daemon::logfile    = $FindBin::Bin . "/../log/find-hotspots.log";
$App::Daemon::pidfile    = $FindBin::Bin . "/find-hotspots-$source_id.pid";
daemonize();

my $schema = SolveWith::Schema->connect('dbi:SQLite:' . $FindBin::Bin . '/../db/puzzles.db');
my $source = $schema->resultset('SolvepadSource')->find($source_id) || die "No source found: $source_id";

my $hotspot = $source->solvepad_hotspots->first();
if ($hotspot) {
    warn "hotspots already exist for $source_id, exiting\n";
    exit 0;
}

my $tempdir = tempdir(CLEANUP => 1);

chdir($tempdir) || die;

my $image;
if ($source_file) {
    $image = read_file($source_file);
} else {
    my $ua = Mojo::UserAgent->new;
    my $url = $source->url;
    die "Bad url" unless $url =~ /\.(pdf|gif|png|jpg)$/;
    my $suffix = $1;
    $image = $ua->get($url)->res->body;
}

if (! $image) {
    die "No image data";
}
my $checksum = md5_sum($image);
if ($checksum ne $source->checksum) {
    die "Checksums don't match: $checksum vs " . $source->checksum;
}

my $fh;
open ($fh, ">", "$tempdir/fromweb") || die $!;
print $fh $image;
close($fh);

my $key = new_secret_key($source_id);
my $dest = realpath("$FindBin::Bin/../public/puzimg/$key.png");
system("gm convert +adjoin  -format PNG32 fromweb out%05.png");
system("gm montage -mode concatenate out*png $dest");

my $file_output = `file $dest`;
if ($file_output =~ / (\d+) x (\d+)/) {
    $source->width($1);
    $source->height($2);
    $source->disk_file($dest);
    $source->update;
}

my $json;
if (Mojo::JSON->can('new')) {
    $json = Mojo::JSON->new();
}

my $hotspots = `$FindBin::Bin/analyze-image $dest`;
my $data = $json ? $json->decode($hotspots) : Mojo::JSON::decode_json($hotspots);
my $rs = $schema->resultset('SolvepadHotspot');
my %uuid_to_id;
for my $found (@$data) {
    my $hotspot_uuid;
    if ($found->{id}) {
        $hotspot_uuid = $found->{id};
    }
    chomp $hotspot_uuid;

    my $id = $rs->create(
        {
          source_id => $source->id,
          shape => $found->{shape},
          shape_data => $found->{shape_data}
      }
    );
    $uuid_to_id{$hotspot_uuid} = $id->id;
}

for my $found (@$data) {
    my $hotspot = $rs->find($uuid_to_id{$found->{id}});
    for my $dir (qw/up down left right/) {
        if ($found->{$dir} && $uuid_to_id{$found->{$dir}}) {
            $hotspot->set_column($dir, $uuid_to_id{$found->{$dir}});
        }
    }
    $hotspot->update;
}

chdir('/tmp');

sub new_secret_key {
    my $id = shift;
    my $key = `cat /proc/sys/kernel/random/uuid`;
    chomp $key;
    if (length($key) < 8) {
        $key = '';
        for (1..8) {
            my $letter = int(rand(26));
            $key .= chr(97+$letter);
        }
    } else {
        $key = substr($key, -8);
    }
    return $id . "-$key";
}

